{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2491748,"sourceType":"datasetVersion","datasetId":1500837}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Importing the Data for Training","metadata":{}},{"cell_type":"code","source":"import shutil\nimport os\nfrom PIL import Image\nimport numpy\nimport cv2\nimport matplotlib.pyplot as plt\nfrom ultralytics import YOLO\nfrom scipy import ndimage, interpolate","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"path = os.path.realpath(\"/kaggle/input/imagenet100\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!ls {path}","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"shutil.copytree(\"/kaggle/input/imagenet100\", \"/kaggle/working/imagenet100\", dirs_exist_ok=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def merge_image_files(source_dir, destination_dir):\n    # Create the destination directory if it doesn't exist\n    if not os.path.exists(destination_dir):\n        os.makedirs(destination_dir)\n\n    # Walk through the directory tree\n    for root, dirs, files in os.walk(source_dir):\n        for file in files:\n            # Check if the file is an image (you can add more extensions if needed)\n            if file.lower().endswith(('.jpeg', '.jpg', '.png', '.gif')):\n                # Construct full file path\n                file_path = os.path.join(root, file)\n                # Move the file to the destination directory\n                shutil.move(file_path, os.path.join(destination_dir, file))\n\n    print(f\"All image files have been moved to {destination_dir}\")\n\n# Example usage\nsource_directory = '/kaggle/working/imagenet100'\ndestination_directory = '/kaggle/working/imagenet100merged'\n\nmerge_image_files(source_directory, destination_directory)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"files = os.listdir(\"/kaggle/working/imagenet100merged\")\nlen(files)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!ls {\"/kaggle/working\"}","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!rm -r {\"/kaggle/working/imagenet100\"}","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!mv {\"/kaggle/working/imagenet100merged\"} {\"/kaggle/working/data_original\"}","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!ls {\"/kaggle/working\"}","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"os.makedirs(\"/kaggle/working/data\", exist_ok=True)\n    \nos.makedirs(\"/kaggle/working/data/test\", exist_ok=True)\nos.makedirs(\"/kaggle/working/data/test/images\", exist_ok=True)\nos.makedirs(\"/kaggle/working/data/test/labels\", exist_ok=True)\n\nos.makedirs(\"/kaggle/working/data/train\", exist_ok=True)\nos.makedirs(\"/kaggle/working/data/train/images\", exist_ok=True)\nos.makedirs(\"/kaggle/working/data/train/labels\", exist_ok=True)\n\nos.makedirs(\"/kaggle/working/data/valid\", exist_ok=True)\nos.makedirs(\"/kaggle/working/data/valid/images\", exist_ok=True)\nos.makedirs(\"/kaggle/working/data/valid/labels\", exist_ok=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!ls {\"/kaggle/working\"}","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!ls {\"/kaggle/working/\"}\n!ls {\"/kaggle/working/data/\"}","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Function Definitions\n\nFirst we will import the fuction that generates the gradients we will use to transform the images.","metadata":{}},{"cell_type":"code","source":"def generate_function_gradient(func, image_shape, radius, center=(0.5, 0.5), strength=1, edge_smoothness=0.1, center_smoothness=0.20):\n    rows, cols = image_shape[:2]\n    max_dim = max(rows, cols)\n    \n    y, x = np.mgrid[0:rows, 0:cols].astype(np.float32)\n    y = (y - center[1] * rows) / max_dim\n    x = (x - center[0] * cols) / max_dim\n    \n    dist_from_center = np.sqrt(x**2 + y**2)\n    \n    z = func(x, y)\n    \n    gy, gx = np.gradient(z)\n\n    edge_smoothness = np.maximum(edge_smoothness, 1e-6)\n    center_smoothness = np.maximum(center_smoothness, 1e-6)\n\n    edge_mask = np.clip((radius - dist_from_center) / (radius * edge_smoothness), 0, 1)\n    center_mask = np.clip((dist_from_center - radius * center_smoothness) / (radius * center_smoothness), 0, 1)\n    mask = edge_mask * center_mask\n    \n    gx *= mask\n    gy *= mask\n    \n    magnitude = np.sqrt(gx**2 + gy**2)\n    max_magnitude = np.max(magnitude)\n    if max_magnitude > 0:\n        gx /= max_magnitude\n        gy /= max_magnitude\n    \n    # Increase the base scale factor\n    base_scale = radius * max_dim * 0.2  # Increased from 0.1 to 0.2\n    \n    # Apply a non-linear scaling to the strength\n    adjusted_strength = np.power(strength, 1.5)  # This will make the effect more pronounced at higher strengths\n    \n    # Increase the maximum strength multiplier\n    scale_factor = base_scale * np.clip(adjusted_strength, 0, 3)  # Increased max from 2 to 3\n    \n    # Apply an additional scaling factor based on image size\n    size_factor = np.log(max_dim) / np.log(1000)  # This will be 1 for 1000x1000 images, larger for bigger images\n    scale_factor *= size_factor\n    \n    gx *= scale_factor\n    gy *= scale_factor\n    \n    print(f\"Final scale factor: {scale_factor}\")\n    print(f\"Final gradient ranges: gx [{np.min(gx)}, {np.max(gx)}], gy [{np.min(gy)}, {np.max(gy)}]\")\n    \n    return gx, gy","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We will then import the function that we are using for our image distortion.  ","metadata":{}},{"cell_type":"code","source":"def function(x, y):\n    r = -np.sqrt(x**2 + y**2)\n    return r ","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def definitions(generator):\n    radius = generator.normal(loc=0.25, scale=(0.5/6))\n    strength = generator.normal(loc=1, scale=(1/6))\n    smoothness = generator.normal(loc=1, scale=(1/6))\n\n    vmin = min([1-radius, radius])\n    vmax = max([1-radius, radius])\n    \n    # Generate the Mean and Standard Deviation for use in teh position\n    mean = (vmax+vmin) / 2\n    std = (vmax-vmin) / 4\n    coordinates = np.random.uniform(low=vmin, high=vmax, size=(2))\n    \n    print()\n    print(f\"Radius is {radius}\")\n    print(f\"Coordinates are {coordinates}\")\n    print(f\"Strength is {strength}\")\n    print(f\"Smoothness is {smoothness}\")\n    print()\n\n    return radius, coordinates, strength, smoothness","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def yolo_output(obj_id, x, y, w, h, all_ids):\n    if len(str(obj_id)) > len(str(max(all_ids))):\n        spaces = \" \" * len(str(max(all_ids))) - len(str(obj_id))\n    else:\n        spaces = ''\n    return f\"{obj_id}{spaces} {x} {y} {w} {h}\"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Start of Generation","metadata":{}},{"cell_type":"code","source":"# Sets the information that the yolo_output will use\nlabel = 0\nYOLO_dict = {0 : 'Bulge'}\nids = list(YOLO_dict.keys())\n\n# Creates the randomization Generator\nrng = np.random.default_rng()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Sets the split of data\ntrain, val, test = 0.8, 0.1, 0.1\nprint(train*100, val*100, test*100)\n\nfile_list = os.listdir(\"/kaggle/working/data_original\")\nfile_count = len(file_list)\n\ntrain_run = round(train * file_count)\nval_run = round(val * file_count)\ntest_run = round(test * file_count)\nprint(train_run, val_run, test_run)\n\ncounter_train, counter_test, counter_val = 0, 0, 0","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for _ in range(sum([train_run, val_run, test_run])):\n    print(f\"{_}/{file_count}\")\n    image = f\"/kaggle/working/data_original/{file_list[_]}\"\n    I = np.asarray(Image.open(image))\n    \n    if counter_train != train_run:\n        counter_train += 1\n        path = os.path.realpath(\"/kaggle/working/data/train/images\")\n        yolo_path = os.path.realpath(\"/kaggle/working/data/train/labels\")\n    elif counter_test != test_run:\n        counter_test += 1\n        path = os.path.realpath(\"/kaggle/working/data/test/images\")\n        yolo_path = os.path.realpath(\"/kaggle/working/data/test/labels\")\n    elif counter_val != val_run:\n        counter_val += 1\n        path = os.path.realpath(\"/kaggle/working/data/valid/images\")\n        yolo_path = os.path.realpath(\"/kaggle/working/data/valid/labels\")\n        \n    # Downsample large images\n    max_size = 1024  # Increased from 512 to allow for more detail\n    if max(I.shape[:2]) > max_size:\n        scale = max_size / max(I.shape[:2])\n        new_size = (int(I.shape[1] * scale), int(I.shape[0] * scale))\n        I = cv2.resize(I, new_size, interpolation=cv2.INTER_AREA)\n        print(f\"Downsampled image to {I.shape}\")\n    \n    radius, location, strength, edge_smoothness = definitions(rng)\n    center_x, center_y = location\n    # center_smoothness = edge_smoothness\n    edge_smoothness = 0\n    center_smoothness = 0\n    \n    print(f\"Input image shape: {I.shape}\")\n    print(f\"Radius: {radius}, Center: ({center_x}, {center_y}), Strength: {strength}\")\n    \n    gx, gy = generate_function_gradient(\n        function, \n        I.shape, \n        radius, \n        (center_x, center_y), \n        strength, \n        edge_smoothness, \n        center_smoothness\n    )\n    \n    # Vectorized transformation\n    rows, cols = I.shape[:2]\n    y, x = np.mgrid[0:rows, 0:cols].astype(np.float32)\n        \n    x_new = x + gx\n    y_new = y + gy\n        \n    x_new = np.clip(x_new, 0, cols - 1)\n    y_new = np.clip(y_new, 0, rows - 1)\n        \n    transformed = cv2.remap(I, x_new, y_new, cv2.INTER_LINEAR)\n    \n    print(f\"Transformed image shape: {transformed.shape}\")\n    \n    # Rescale the image\n    if max(I.shape[:2]) != max(np.asarray(Image.open(image)).shape[:2]):\n        original_size = np.asarray(Image.open(image)).shape[:2][::-1]\n        transformed = cv2.resize(transformed, original_size, interpolation=cv2.INTER_LINEAR)\n        inverse_transformed = cv2.resize(inverse_transformed, original_size, interpolation=cv2.INTER_LINEAR)\n        vector_field = cv2.resize(vector_field, original_size, interpolation=cv2.INTER_LINEAR)\n        inverted_vector_field = cv2.resize(inverted_vector_field, original_size, interpolation=cv2.INTER_LINEAR)\n    \n    base_filename = os.path.splitext(file_list[_])[0]\n    \n    transformed_out = Image.fromarray(transformed)\n    transformed_out = transformed_out.convert('RGB')\n    transformed_out.save(f\"{path}/{base_filename}_distorted.jpg\")\n        \n    size = radius * 2\n    yolo = yolo_output(label, center_x, (1-center_y), size, size, ids)\n    \n    f = open(f\"{yolo_path}/{base_filename}_distorted.txt\", \"wt\")\n    f.write(yolo)\n    f.close()\n    \n    os.remove(f\"/kaggle/working/data_original/{file_list[_]}\")\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}